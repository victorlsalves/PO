# -*- coding: utf-8 -*-
"""Atividade MergeSort

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ngsWJWVr7uMz6UwHyZIq0OBrnRbVUiQq

Gerando os números
"""

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

rng = np.random.default_rng()
lista1 = rng.integers(low = 0, high = 1000000, size = 200000)
lista2 = rng.integers(low = 0, high = 1000000, size = 300000)
lista3 = rng.integers(low = 0, high = 1000000, size = 400000)
lista4 = rng.integers(low = 0, high = 1000000, size = 500000)
lista5 = rng.integers(low = 0, high = 1000000, size = 600000)
lista6 = rng.integers(low = 0, high = 1000000, size = 700000)
lista7 = rng.integers(low = 0, high = 1000000, size = 800000)
lista8 = rng.integers(low = 0, high = 1000000, size = 900000)
lista9 = rng.integers(low = 0, high = 1000000, size = 1000000)

"""Copiando as Listas"""

lista1merge = lista1.copy()
lista2merge = lista2.copy()
lista3merge = lista3.copy()
lista4merge = lista4.copy()
lista5merge = lista5.copy()
lista6merge = lista6.copy()
lista7merge = lista7.copy()
lista8merge = lista8.copy()
lista9merge = lista9.copy()

lista1quick = lista1.copy()
lista2quick = lista2.copy()
lista3quick = lista3.copy()
lista4quick = lista4.copy()
lista5quick = lista5.copy()
lista6quick = lista6.copy()
lista7quick = lista7.copy()
lista8quick = lista8.copy()
lista9quick = lista9.copy()

"""Implementando MergeSort"""

def mergesort(lista, inicio = 0, fim = None):
  if fim is None:
    fim = len(lista) - 1
  if inicio < fim:
    meio = (inicio + fim) // 2
    mergesort(lista, inicio, meio)
    mergesort(lista, meio + 1, fim)
    merge(lista, inicio, meio, fim)

def merge(lista, inicio, meio, fim):
    n1 = meio - inicio + 1
    n2 = fim - meio
    aux_inicio = [0] * n1
    aux_fim = [0] * n2
    for i in range(n1):
        aux_inicio[i] = lista[inicio + i]
    for j in range(n2):
        aux_fim[j] = lista[meio + 1 + j]
    i = 0
    j = 0
    k = inicio
    while i < n1 and j < n2:
        if aux_inicio[i] <= aux_fim[j]:
            lista[k] = aux_inicio[i]
            i += 1
        else:
            lista[k] = aux_fim[j]
            j += 1
        k += 1
    while i < n1:
        lista[k] = aux_inicio[i]
        i += 1
        k += 1
    while j < n2:
        lista[k] = aux_fim[j]
        j += 1
        k += 1

"""Calculando o tempo do MergeSort"""

import time

start_time = time.time()
mergesort(lista1merge)
end_time = time.time()
tempo1medio = end_time - start_time

start_time = time.time()
mergesort(lista2merge)
end_time = time.time()
tempo2medio = end_time - start_time

start_time = time.time()
mergesort(lista3merge)
end_time = time.time()
tempo3medio = end_time - start_time

start_time = time.time()
mergesort(lista4merge)
end_time = time.time()
tempo4medio = end_time - start_time

start_time = time.time()
mergesort(lista5merge)
end_time = time.time()
tempo5medio = end_time - start_time

start_time = time.time()
mergesort(lista6merge)
end_time = time.time()
tempo6medio = end_time - start_time

start_time = time.time()
mergesort(lista7merge)
end_time = time.time()
tempo7medio = end_time - start_time

start_time = time.time()
mergesort(lista8merge)
end_time = time.time()
tempo8medio = end_time - start_time

start_time = time.time()
mergesort(lista9merge)
end_time = time.time()
tempo9medio = end_time - start_time

"""Implementando o QuickSort"""

def quicksort(lista, inicio = 0, fim = None):
    if fim is None:
        fim = len(lista) - 1
    if inicio < fim:
        pivo = particao(lista, inicio, fim)
        quicksort(lista, inicio, pivo - 1)
        quicksort(lista, pivo + 1, fim)
    return lista

def particao(lista, inicio, fim):
    meio = (inicio + fim) // 2
    if lista[inicio] > lista[fim]:
        lista[inicio], lista[fim] = lista[fim], lista[inicio]
    if lista[inicio] > lista[meio]:
        lista[inicio], lista[meio] = lista[meio], lista[inicio]
    if lista[meio] > lista[fim]:
        lista[meio], lista[fim] = lista[fim], lista[meio]
    pivo = lista[meio]
    lista[meio], lista[fim - 1] = lista[fim - 1], lista[meio]

    i = inicio
    for j in range(inicio, fim):
        if lista[j] <= pivo:
            lista[i], lista[j] = lista[j], lista[i]
            i += 1
    lista[i], lista[fim] = lista[fim], lista[i]
    return i

"""Calculando o tempo do QuickSort"""

start_time = time.time()
quicksort(lista1quick)
end_time = time.time()
tempo1medioquick = end_time - start_time

start_time = time.time()
quicksort(lista2quick)
end_time = time.time()
tempo2medioquick = end_time - start_time

start_time = time.time()
quicksort(lista3quick)
end_time = time.time()
tempo3medioquick = end_time - start_time

start_time = time.time()
quicksort(lista4quick)
end_time = time.time()
tempo4medioquick = end_time - start_time

start_time = time.time()
quicksort(lista5quick)
end_time = time.time()
tempo5medioquick = end_time - start_time

start_time = time.time()
quicksort(lista6quick)
end_time = time.time()
tempo6medioquick = end_time - start_time

start_time = time.time()
quicksort(lista7quick)
end_time = time.time()
tempo7medioquick = end_time - start_time

start_time = time.time()
quicksort(lista8quick)
end_time = time.time()
tempo8medioquick = end_time - start_time

start_time = time.time()
quicksort(lista9quick)
end_time = time.time()
tempo9medioquick = end_time - start_time

"""Construindo o gráfico"""

tamanhos = [200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000]

temposmedio = [tempo1medio, tempo2medio, tempo3medio, tempo4medio, tempo5medio, tempo6medio, tempo7medio, tempo8medio, tempo9medio]
plt.plot(temposmedio, tamanhos, marker='o', label='Caso Médio MergeSort')

temposmedioquick = [tempo1medioquick, tempo2medioquick, tempo3medioquick, tempo4medioquick, tempo5medioquick, tempo6medioquick, tempo7medioquick, tempo8medioquick, tempo9medioquick]
plt.plot(temposmedioquick, tamanhos, marker='o', label='Caso Médio QuickSort')

plt.xlabel('Tempo(s)')
plt.ylabel('Tamanho da Lista')
plt.title('Comparação de Tempo de Execução dos Algoritmos')
plt.legend()
plt.show()