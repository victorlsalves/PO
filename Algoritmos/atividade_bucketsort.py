# -*- coding: utf-8 -*-
"""Atividade BucketSort

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OymGN-2n4oUbUgy4anilRDtwDpm9Nd5n

Criando a lista a ser ordenada
"""

import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

lista = np.random.randint(0, 50000, 10000)
tamanho = np.size(lista)

"""Implementando o algoritmo"""

def quicksort(arr):
    if len(arr) < 2:
        return arr
    pivot = arr[len(arr) // 2]  # pivo = elemento do meio
    less = [i for i in arr if i < pivot]
    equal = [i for i in arr if i == pivot]
    greater = [i for i in arr if i > pivot]
    return quicksort(less) + equal + quicksort(greater)


def bucketsort(lista, baldes):
    if len(lista) < 2:
        return lista  # ja ta ordenado

    max_val = max(lista)
    min_val = min(lista)
    if max_val == min_val:
        return lista

    bucket_size = (max_val - min_val) / baldes
    buckets_list = [[] for _ in range(baldes)]

    for num in lista:
        bi = int((num - min_val) / bucket_size)
        bi = min(bi, baldes - 1)  # index n sair de fora do escopo
        buckets_list[bi].append(num)

    sorted_list = []
    for bucket in buckets_list:
        if bucket:
            # usar insetion sort para inputs menores
            sorted_list.extend(quicksort(bucket) if len(bucket) > 10 else sorted(bucket))

    return sorted_list

"""Calculando o tempo"""

import time

start_time = time.time()
listaord = bucketsort(lista, 2)
end_time = time.time()
tempo2baldes = end_time - start_time

start_time = time.time()
listaord = bucketsort(lista, 20)
end_time = time.time()
tempo20baldes = end_time - start_time

start_time = time.time()
listaord = bucketsort(lista, 200)
end_time = time.time()
tempo200baldes = end_time - start_time

start_time = time.time()
listaord = bucketsort(lista, 2000)
end_time = time.time()
tempo2000baldes = end_time - start_time

start_time = time.time()
metade = np.floor_divide(tamanho, 2)
listaord = bucketsort(lista, metade)
end_time = time.time()
tempometadebaldes = end_time - start_time

"""Construindo o gráfico"""

tamanho_baldes = [2, 20, 200, 2000, metade]
tempos = [tempo2baldes, tempo20baldes, tempo200baldes, tempo2000baldes, tempometadebaldes]
plt.plot(tamanho_baldes, tempos, marker='o', label='Baldes')

plt.xlabel('Tamanho dos Baldes')
plt.ylabel('Tempo(s)')
plt.title('Comparação de Tempo de Execução do Algoritmo BucketSort com diferentes tamanhos de baldes')
plt.legend()
plt.show()